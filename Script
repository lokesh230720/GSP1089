export zone=



-------------------------------------------------------------------------------------------------------------------------------------


export PROJECT_ID=$(gcloud config get-value project)
gcloud services enable \
  artifactregistry.googleapis.com \
  cloudfunctions.googleapis.com \
  cloudbuild.googleapis.com \
  eventarc.googleapis.com \
  run.googleapis.com \
  logging.googleapis.com \
  pubsub.googleapis.com

# Set the region from the zone and configure gcloud
export REGION="${zone%-*}"
gcloud config set compute/region $REGION
export PROJECT_ID=$(gcloud config get-value project)

# Enable required GCP services
gcloud services enable \
  artifactregistry.googleapis.com \
  cloudfunctions.googleapis.com \
  cloudbuild.googleapis.com \
  eventarc.googleapis.com \
  run.googleapis.com \
  logging.googleapis.com \
  pubsub.googleapis.com

# Create and navigate to hello-http directory
mkdir ~/hello-http && cd $_

# Create index.js and package.json for the HTTP function
cat > index.js <<EOF_END
const functions = require('@google-cloud/functions-framework');

functions.http('helloWorld', (req, res) => {
  res.status(200).send('HTTP with Node.js in GCF 2nd gen!');
});
EOF_END

cat > package.json <<EOF_END
{
  "name": "nodejs-functions-gen2-codelab",
  "version": "0.0.1",
  "main": "index.js",
  "dependencies": {
    "@google-cloud/functions-framework": "^2.0.0"
  }
}
EOF_END

# Function to deploy the HTTP function
deploy_function() {
  gcloud functions deploy nodejs-http-function \
    --gen2 \
    --runtime nodejs18 \
    --entry-point helloWorld \
    --source . \
    --region $REGION \
    --trigger-http \
    --timeout 600s \
    --max-instances 1 \
    --quiet
}

SERVICE_NAME="nodejs-http-function"

# Loop until the Cloud Run service is created
while true; do
  deploy_function
  if gcloud run services describe $SERVICE_NAME --region $REGION &> /dev/null; then
    echo "Cloud Run service is created. Exiting the loop."
    break
  else
    echo "Waiting for Cloud Run service to be created..."
    sleep 10
  fi
done

# Get project number and service account for the Pub/Sub publisher role
PROJECT_NUMBER=$(gcloud projects list --filter="project_id:$PROJECT_ID" --format='value(project_number)')
SERVICE_ACCOUNT=$(gsutil kms serviceaccount -p $PROJECT_NUMBER)

gcloud projects add-iam-policy-binding $PROJECT_ID \
  --member serviceAccount:$SERVICE_ACCOUNT \
  --role roles/pubsub.publisher

# Create and navigate to hello-storage directory
mkdir ~/hello-storage && cd $_

# Create index.js and package.json for the storage function
cat > index.js <<EOF_END
const functions = require('@google-cloud/functions-framework');

functions.cloudEvent('helloStorage', (cloudevent) => {
  console.log('Cloud Storage event with Node.js in GCF 2nd gen!');
  console.log(cloudevent);
});
EOF_END

cat > package.json <<EOF_END
{
  "name": "nodejs-functions-gen2-codelab",
  "version": "0.0.1",
  "main": "index.js",
  "dependencies": {
    "@google-cloud/functions-framework": "^2.0.0"
  }
}
EOF_END

# Create a Cloud Storage bucket
BUCKET="gs://gcf-gen2-storage-$PROJECT_ID"
gsutil mb -l $REGION $BUCKET

# Function to deploy the storage function
deploy_function () {
  gcloud functions deploy nodejs-storage-function \
    --gen2 \
    --runtime nodejs18 \
    --entry-point helloStorage \
    --source . \
    --region $REGION \
    --trigger-bucket $BUCKET \
    --trigger-location $REGION \
    --max-instances 1 \
    --quiet
}

# Variables
SERVICE_NAME="nodejs-storage-function"

# Loop until the Cloud Run service is created
while true; do
  deploy_function
  if gcloud run services describe $SERVICE_NAME --region $REGION &> /dev/null; then
    echo "Cloud Run service is created. Exiting the loop."
    break
  else
    echo "Waiting for Cloud Run service to be created..."
    sleep 10
  fi
done

# Example of uploading a file to the created bucket
echo "Hello World" > random.txt
gsutil cp random.txt $BUCKET/random.txt

# Reading the logs of the storage function
gcloud functions logs read nodejs-storage-function \
  --region $REGION --gen2 --limit=100 --format "value(log)"

# Add IAM policy binding for Eventarc
gcloud projects add-iam-policy-binding $PROJECT_ID \
  --member serviceAccount:$PROJECT_NUMBER-compute@developer.gserviceaccount.com \
  --role roles/eventarc.eventReceiver

# Clone and deploy the gce-vm-labeler function
cd ~
git clone https://github.com/GoogleCloudPlatform/eventarc-samples.git
cd ~/eventarc-samples/gce-vm-labeler/gcf/nodejs

gcloud functions deploy gce-vm-labeler \
  --gen2 \
  --runtime nodejs18 \
  --entry-point labelVmCreation \
  --source . \
  --region $REGION \
  --trigger-event-filters="type=google.cloud.audit.log.v1.written,serviceName=compute.googleapis.com,methodName=beta.compute.instances.insert" \
  --trigger-location $REGION \
  --max-instances 1

# Create a Compute Engine instance
gcloud compute instances create instance-1 --zone=$zone

# Create and navigate to hello-world-colored directory
mkdir ~/hello-world-colored && cd $_
touch main.py

# Create main.py for the color function
cat > main.py <<EOF_END
import os

color = os.environ.get('COLOR')

def hello_world(request):
    return f'<body style="background-color:{color}"><h1>Hello World!</h1></body>'
EOF_END

echo > requirements.txt 

# Deploy the color function
COLOR=yellow
gcloud functions deploy hello-world-colored \
  --gen2 \
  --runtime python39 \
  --entry-point hello_world \
  --source . \
  --region $REGION \
  --trigger-http \
  --allow-unauthenticated \
  --update-env-vars COLOR=$COLOR \
  --max-instances 1 \
  --quiet

# Create and navigate to min-instances directory
mkdir ~/min-instances && cd $_
touch main.go

# Create main.go for the slow-function
cat > main.go <<EOF_END
package p

import (
        "fmt"
        "net/http"
        "time"
)

func init() {
        time.Sleep(10 * time.Second)
}

func HelloWorld(w http.ResponseWriter, r *http.Request) {
        fmt.Fprint(w, "Slow HTTP Go in GCF 2nd gen!")
}
EOF_END

# Create go.mod file
echo "module example.com/mod" > go.mod

# Deploy the slow-function
gcloud functions deploy slow-function \
  --gen2 \
  --runtime go116 \
  --entry-point HelloWorld \
  --source . \
  --region $REGION \
  --trigger-http \
  --allow-unauthenticated \
  --max-instances 4 \
  --quiet

# Deploy slow-function to Cloud Run
gcloud run deploy slow-function \
  --image=$REGION-docker.pkg.dev/$DEVSHELL_PROJECT_ID/gcf-artifacts/slow--function:version_1 \
  --min-instances=1 \
  --max-instances=4 \
  --region=$REGION \
  --project=$DEVSHELL_PROJECT_ID \
 && gcloud run services update-traffic slow-function --to-latest --region=$REGION


# Start of the script execution
echo "${BG_MAGENTA}${BOLD}Starting Execution${RESET}"

# Set the region from the zone
export REGION="${zone%-*}"

# Navigate to min-instances directory
cd min-instances/

# Get the URL of the slow-function
SLOW_URL=$(gcloud functions describe slow-function --region $REGION --gen2 --format="value(serviceConfig.uri)")

# Load testing the slow-function
hey -n 10 -c 10 $SLOW_URL

# Delete the slow-function service from Cloud Run
gcloud run services delete slow-function --region $REGION --quiet

# Deploy the slow-concurrent-function
gcloud functions deploy slow-concurrent-function \
  --gen2 \
  --runtime go116 \
  --entry-point HelloWorld \
  --source . \
  --region $REGION \
  --trigger-http \
  --allow-unauthenticated \
  --min-instances 1 \
  --max-instances 4 \
  --quiet

# Deploy slow-concurrent-function to Cloud Run with specified configurations
gcloud run deploy slow-concurrent-function \
  --image=$REGION-docker.pkg.dev/$DEVSHELL_PROJECT_ID/gcf-artifacts/slow--concurrent--function:version_1 \
  --concurrency=100 \
  --cpu=1 \
  --max-instances=4 \
  --region=$REGION \
  --project=$DEVSHELL_PROJECT_ID \
 && gcloud run services update-traffic slow-concurrent-function --to-latest --region=$REGION


